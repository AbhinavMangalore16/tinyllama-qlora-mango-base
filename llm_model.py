# -*- coding: utf-8 -*-
"""TinyLlama + QLoRA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ir7fLU2cM5dIf_Ced-So9KaR7TDJVR8
"""

!pip install -q accelerate peft bitsandbytes transformers trl sentencepiece triton

from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig
from datasets import load_dataset
import torch

tokenizer = AutoTokenizer.from_pretrained("TinyLlama/TinyLlama-1.1B-Chat-v1.0")

def format_prompt(ex):
  chat = ex["messages"]
  prompt = tokenizer.apply_chat_template(chat, tokenize=False)
  return {"text": prompt}

dataset = load_dataset("HuggingFaceH4/ultrachat_200k", split="test_sft").shuffle(seed=42).select(range(3000))

dataset = dataset.map(format_prompt)

print(dataset["text"][16])

!pip install --upgrade bitsandbytes

model_name = "TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T"
bnb_config = BitsAndBytesConfig(
    load_in_4bit = True,
    bnb_4bit_quant_type = "nf4",
    bnb_4bit_compute_dtype = "float16",
    bnb_4bit_use_double_quant = True
)

tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = "<PAD>"
tokenizer.padding_side = "left"
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    quantization_config=bnb_config
)
model.config.use_cache = False
model.config.pretraining_tp = 1

model.config.use_cache = False
model.config.pretraining_tp = 1

tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code = True)
tokenizer.pad_token = "<PAD>"
tokenizer.padding_side = "left"

from peft import LoraConfig, prepare_model_for_kbit_training, get_peft_model

peft_config = LoraConfig(
    lora_alpha= 32,
    lora_dropout = 0.1,
    r = 64,
    bias = "none",
    task_type = "CAUSAL_LM",
    target_modules = ["k_proj", "gate_proj", "v_proj", "up_proj", "q_proj", "o_proj", "down_proj"]
)

model = prepare_model_for_kbit_training(model)
model = get_peft_model(model, peft_config)

from transformers import TrainingArguments, DataCollatorForSeq2Seq

output_dir = "./results"
training_arguments = TrainingArguments(
    output_dir=output_dir,
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,
    optim="paged_adamw_32bit",
    learning_rate=2e-4,
    lr_scheduler_type="cosine",
    num_train_epochs=1,
    logging_steps=10,
    fp16=True,
    gradient_checkpointing=True
)

from trl import SFTTrainer, SFTConfig

trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    dataset_text_field="text",
    tokenizer=tokenizer,
    args=training_arguments,
    max_seq_length=512,
    peft_config=peft_config,
)

trainer.train()

trainer.model.save_pretrained("TinyLlama-1.1B-qlora-mango")

from peft import AutoPeftModelForCausalLM

model = AutoPeftModelForCausalLM.from_pretrained(
    "TinyLlama-1.1B-qlora-mango",
    low_cpu_mem_usage=True,
    device_map="auto"
)

merged_model = model.merge_and_unload()

from transformers import pipeline

prompt = """<|user|>
Tell me something about mangoes.</s>
<|assistant|>"""

pipe = pipeline(task="text-generation", model = merged_model, tokenizer = tokenizer)

print(pipe(prompt)[0]["generated_text"])

merged_model.save_pretrained("TinyLlama-1.1B-qlora-mango_model")

tokenizer.save_pretrained("TinyLlama-1.1B-qlora-mango_model")

import shutil

# Zip the model folder
shutil.make_archive("TinyLlama-1.1B-qlora-mango_model", 'zip', "TinyLlama-1.1B-qlora-mango_model")

!pip install -q huggingface_hub

from huggingface_hub import login
login()

from huggingface_hub import create_repo, upload_folder

repo_name = "TinyLlama-1.1B-qlora-mango"
create_repo(repo_name, private=True)  # or private=False

upload_folder(
    folder_path="TinyLlama-1.1B-qlora-mango_model",
    repo_id=f"abhinavm16104/{repo_name}",
    commit_message="Upload TinyLlama QLoRA fine-tuned model"
)

